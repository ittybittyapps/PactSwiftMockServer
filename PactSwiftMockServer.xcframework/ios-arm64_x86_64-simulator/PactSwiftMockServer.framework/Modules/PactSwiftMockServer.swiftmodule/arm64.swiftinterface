// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PactSwiftMockServer
import Foundation
@_exported import PactSwiftMockServer
import Swift
public enum ProviderVerificationError : Swift.Error {
  case verificationFailed
  case nullPointer
  case methodPanicked
  case invalidArguments
  case unknown
  public var description: Swift.String {
    get
  }
  public static func == (a: PactSwiftMockServer.ProviderVerificationError, b: PactSwiftMockServer.ProviderVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Verifier {
  public struct Options {
    public enum LogLevel : Swift.String {
      case error
      case warn
      case info
      case debug
      case trace
      case none
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum PactLocation {
      case directories([Swift.String])
    }
    public init(port: Swift.Int, pactLocation: PactSwiftMockServer.Verifier.Options.PactLocation, providerURL: Swift.String? = nil, filterNoState: Swift.Bool = false, logLevel: PactSwiftMockServer.Verifier.Options.LogLevel = .warn)
  }
}
public enum MockServerError : Swift.Error {
  case invalidPactJSON
  case invalidSocketAddress
  case failedToStart
  case failedToWriteFile
  case methodPanicked
  case nullPointer
  case portNotFound
  case tlsConfigurationFailed
  case validationFaliure
  case unknown
  public var description: Swift.String {
    get
  }
  public static func == (a: PactSwiftMockServer.MockServerError, b: PactSwiftMockServer.MockServerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum TransferProtocol : Swift.Int {
  case standard
  case secure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct PactBroker {
  public let username: Swift.String
  public let password: Swift.String
  public let token: Swift.String
  public let publishVerificationResult: Swift.Bool
}
public struct VersionSelector {
}
final public class Verifier {
  public init()
  final public func verifyProvider(options: PactSwiftMockServer.Verifier.Options) -> Swift.Result<Swift.Bool, PactSwiftMockServer.ProviderVerificationError>
  @objc deinit
}
public class MockServer {
  public var baseUrl: Swift.String {
    get
  }
  public init()
  @objc deinit
  public func setup(pact: Foundation.Data, protocol: PactSwiftMockServer.TransferProtocol = .standard, completion: (Swift.Result<Swift.Int, PactSwiftMockServer.MockServerError>) -> Swift.Void)
  public func verify(completion: (Swift.Result<Swift.Bool, PactSwiftMockServer.VerificationError>) -> Swift.Void)
  public func finalize(pact: Foundation.Data, completion: ((Swift.Result<Swift.String, PactSwiftMockServer.MockServerError>) -> Swift.Void)?)
}
extension MockServer {
  public static func generate_value(regex: Swift.String) -> Swift.String?
  public static func generate_date(format: Swift.String) -> Swift.String?
}
public struct StateHandler {
}
public enum VerificationError : Swift.Error {
  case reason(Swift.String)
  public var description: Swift.String {
    get
  }
}
extension PactSwiftMockServer.ProviderVerificationError : Swift.Equatable {}
extension PactSwiftMockServer.ProviderVerificationError : Swift.Hashable {}
extension PactSwiftMockServer.Verifier.Options.LogLevel : Swift.Equatable {}
extension PactSwiftMockServer.Verifier.Options.LogLevel : Swift.Hashable {}
extension PactSwiftMockServer.Verifier.Options.LogLevel : Swift.RawRepresentable {}
extension PactSwiftMockServer.MockServerError : Swift.Equatable {}
extension PactSwiftMockServer.MockServerError : Swift.Hashable {}
extension PactSwiftMockServer.TransferProtocol : Swift.Equatable {}
extension PactSwiftMockServer.TransferProtocol : Swift.Hashable {}
extension PactSwiftMockServer.TransferProtocol : Swift.RawRepresentable {}
